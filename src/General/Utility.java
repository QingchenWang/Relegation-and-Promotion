package General;
import java.util.Random;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.text.DecimalFormat;

public class Utility {
	
	public static final int PGA_DIVISION = 0;
	public static final int	NATIONWIDE_DIVISION = 1;
	
	public static int numPlayersCreated = 0;
	public static int numPartTimeCreated = 0;
	public static int numPlaceholderCreated = 0;
	
	public static double[][] _golfPlayerRoundScoreDistribution70half = {{0.0001139504,0.000398826,0.001481355,0.005127767,0.013759508,0.033529898,0.074096231,0.139560721,0.237928382,0.368629462,0.511836595,0.65017235,0.768424351,0.857675982,0.92020625,0.957297097,0.978320941,0.989032276,0.995214084,0.998148306,0.999116885,0.999601174,1
	}, {-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12}};
	public static double[][] _golfPlayerRoundScoreDistribution71half = {{0.0000639959,0.000332779,0.001497504,0.004863689,0.0140663,0.036016895,0.077844618,0.145296301,0.244413158,0.37203379,0.512863177,0.650377576,0.766210163,0.853474978,0.913426341,0.952630232,0.975681556,0.9874952,0.994137975,0.997273775,0.998732881,0.999616025,0.999897607,1
	}, {-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13}};
	public static double[][] _golfPlayerRoundScoreDistribution72half = {{0.000144626,0.000694203,0.00208261,0.004830499,0.0153014,0.03768946,0.078907787,0.148501678,0.253008215,0.377849127,0.513508041,0.649369432,0.762061784,0.850514868,0.909059354,0.950306607,0.973909522,0.986694435,0.993173667,0.996615758,0.998293417,0.999392572,0.999710749,1
	}, {-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13}};
	public static double[][] _golfPlayerRoundScoreDistribution72halfplus = {{0.000555247,0.002062346,0.006028397,0.015070992,0.035932419,0.078131197,0.145236773,0.243515507,0.367890854,0.510430713,0.649639089,0.768303324,0.856904894,0.916633616,0.95375585,0.975331165,0.987705243,0.993495677,0.996747839,0.99841358,0.999286111,1
	}, {-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12}};
	
	/*
	 * The full set of golf player career curve data - first set = A, second set = B, third set = C, all of which are normalized and centered
	 */
	public static final double[][] _golfPlayerCareerCurves = {{3.207480828,3.087235848,2.980438132,2.941268013,2.687533445,2.623317725,2.387503251,2.353925318,2.344774789,2.206139396,2.183078864,1.98685274,1.970847148,1.926839098,1.920617016,1.887839311,1.870413166,1.864187895,1.713490747,1.634736439,1.626759929,1.602393432,1.596560071,1.563223624,1.481925043,1.474231844,1.441150065,1.335036571,1.320545134,1.314830001,1.284728199,1.214257729,1.126252112,1.094009631,1.052063443,1.048240913,1.02622897,0.974780938,0.963821484,0.95587015,0.94625841,0.911406437,0.878450279,0.845779416,0.835438339,0.833201162,0.800841725,0.796318484,0.794691735,0.78617379,0.782124538,0.779450174,0.763284366,0.72471103,0.720114848,0.700866309,0.698416194,0.679726445,0.675372772,0.638449004,0.636523171,0.633789096,0.605139819,0.60305543,0.581567619,0.577925555,0.56665268,0.563731535,0.552033912,0.534112011,0.528392875,0.526672094,0.525265598,0.496425076,0.469880007,0.460445272,0.454926325,0.438571212,0.437061885,0.433282825,0.423762896,0.408097343,0.404278205,0.399735208,0.389277303,0.386253421,0.384680153,0.379667866,0.366067796,0.365655175,0.364250266,0.362655569,0.355345534,0.333618749,0.330393556,0.330191191,0.324670086,0.316298068,0.286990132,0.28283939,0.281921976,0.27756679,0.274489369,0.272616098,0.253634487,0.239112909,0.238176747,0.234484736,0.229376344,0.229043443,0.214660555,0.206181553,0.192716876,0.187134244,0.174401715,0.172654736,0.162638707,0.153652973,0.152979631,0.149335478,0.146275344,0.140626684,0.138500835,0.11703265,0.112136324,0.107680679,0.104825413,0.096812497,0.094244969,0.093534725,0.092441458,0.087322108,0.080280619,0.078397885,0.076609235,0.065503814,0.063671487,0.060348204,0.05657466,0.037126665,0.036907558,0.034086453,0.030089524,0.023692025,0.015493543,0.013566552,0.007471095,0.002149526,-0.001368336,-0.009667831,-0.016475964,-0.021354068,-0.024349396,-0.025270231,-0.029439342,-0.036600919,-0.043367796,-0.052866893,-0.05621203,-0.076991832,-0.082238783,-0.084134452,-0.08548016,-0.089778511,-0.090143209,-0.092999308,-0.09354433,-0.111259197,-0.115982762,-0.11757808,-0.118069547,-0.12006303,-0.120232162,-0.124195346,-0.13048654,-0.136854882,-0.141662421,-0.14192616,-0.142315411,-0.142960226,-0.154491664,-0.160006814,-0.167147907,-0.170106154,-0.172117155,-0.173122974,-0.175436089,-0.185088453,-0.193089236,-0.200079731,-0.209399709,-0.212245186,-0.21501983,-0.216117782,-0.223323672,-0.224897841,-0.2262651,-0.22664692,-0.227348601,-0.228951536,-0.232215909,-0.236758591,-0.238365085,-0.241095023,-0.242583318,-0.246453267,-0.249979945,-0.252008422,-0.25239884,-0.266371072,-0.273893804,-0.275363322,-0.280861169,-0.282447829,-0.289560888,-0.298958905,-0.301588569,-0.302342065,-0.308548198,-0.3173977,-0.320109257,-0.340648187,-0.351995989,-0.354196215,-0.357166895,-0.362136213,-0.364441657,-0.389197572,-0.394162262,-0.396050128,-0.407983064,-0.412945088,-0.416453663,-0.423549088,-0.425049999,-0.425962158,-0.428741017,-0.430587804,-0.431935422,-0.45367543,-0.459035835,-0.469615597,-0.474101461,-0.483378758,-0.488818969,-0.492992871,-0.493230862,-0.493246287,-0.497198314,-0.500991143,-0.501126824,-0.501674216,-0.507288115,-0.524583236,-0.527659587,-0.533958199,-0.536992555,-0.549641111,-0.565102347,-0.566019552,-0.567227301,-0.583170852,-0.590857562,-0.596377061,-0.597386997,-0.621180351,-0.625134482,-0.629694073,-0.63177799,-0.631837485
	}, {-4.009499879,-2.454231324,-3.201665506,-2.944634933,-2.428434935,-2.174281524,-2.361977618,-2.448171791,-2.080477145,-2.140420662,-2.362525609,-1.911987735,-2.02316937,-1.902812036,-2.08680326,-1.709235046,-1.613572737,-2.04086564,-1.891937848,-1.436033324,-1.292329991,-1.405549803,-2.347557635,-1.474039933,-1.293356395,-1.350402267,-1.374656052,-1.243403069,-1.242799575,-1.540482534,-1.046671235,-1.06423778,-1.032653275,-1.097390097,-1.008620481,-0.860883519,-0.967377785,-0.846028402,-0.687221477,-0.852654893,-0.915213599,-1.176992167,-0.965490033,-0.81509838,-0.981145712,-0.744681214,-0.766010808,-0.991026474,-0.647057282,-0.924970809,-0.925777577,-0.716491445,-0.775378082,-0.454291251,-0.760524838,-0.597773769,-0.639189437,-0.722067975,-0.559861136,-0.527321022,-0.427116804,-0.566273302,-0.672324101,-0.647754153,-0.562036928,-0.611528546,-0.667132007,-0.75738759,-0.325112659,-0.575762968,-0.486071553,-0.818368242,-0.606552723,-0.517072591,-0.46096475,-0.282171648,-0.401052126,-0.421843571,-0.571014612,-0.415128368,-0.293463148,-0.368941938,-0.380970228,-0.469644225,-0.466735243,-0.364498225,-0.416952403,-0.365369148,-0.30120742,-0.465605297,-0.510986687,-0.37041501,-0.445789072,-0.3217588,-0.265034271,-0.241087785,-0.390659227,-0.295683237,-0.305406182,-0.27948358,-0.386964901,-0.226240756,-0.397444195,-0.208921287,-0.331814782,-0.304742029,-0.143845369,-0.35551494,-0.378034828,-0.211805151,-0.22686556,-0.331941446,-0.146863786,-0.155365185,-0.249227509,-0.038294136,-0.250128038,0.132779545,-0.254630032,-0.343221911,-0.049586039,-0.224914142,-0.156696732,-0.141942824,-0.306623699,-0.13730188,-0.309763089,-0.168789707,-0.053157418,0.011880974,-0.234028439,-0.077458745,-0.228993147,-0.226275482,0.023378685,-0.195214521,-0.066454343,-0.160446246,-0.005484026,-0.06052528,-0.05627352,-0.17204604,-0.095978231,-0.038942506,-0.052062277,-0.006122462,-0.030492704,0.033662856,-0.0446153,-0.008083392,-0.060619222,-0.009898606,-0.006226973,0.048783545,-0.048365629,0.245791494,0.063717565,0.124094877,0.103800921,-0.008721356,0.024546078,0.139632017,0.015890847,-0.044783688,0.042587024,0.00430566,0.082474348,0.078494419,0.128517085,0.083002532,0.121441054,0.117322397,0.18554295,0.279300432,0.151276202,0.126878826,0.160881904,0.071121076,0.242719021,0.164127111,0.189086715,0.106155571,0.208942924,0.189905532,0.094739171,0.094200858,0.200078832,0.181338044,0.163225688,0.249975965,0.184934997,0.25188872,0.160340682,0.19094386,0.166902684,0.21163521,0.131668991,0.199202414,0.1277894,0.133725481,0.145220647,0.173678181,0.15459329,0.198070302,0.196123579,0.167257061,0.237653311,0.188723461,0.296312572,0.215103419,0.238854809,0.207732545,0.278735998,0.25247203,0.308404533,0.285241354,0.30578087,0.250781354,0.288826945,0.245277157,0.336871239,0.362781695,0.391661514,0.333559856,0.345325856,0.348495707,0.385491251,0.34841456,0.36011715,0.371514523,0.378947834,0.368342862,0.401059526,0.603506618,0.528503514,0.478486047,0.466386427,0.477677855,0.432818339,0.446407426,0.503748067,0.465745522,0.48863528,0.534963336,0.504406053,0.472946194,0.46776944,0.561247133,0.504304981,0.414419506,0.545474421,0.481408742,0.550221035,0.536320075,0.576611452,0.503460721,0.628861673,0.511865667,0.590632571,0.510875817,0.531742765,0.622050983,0.578173569,0.589494897,0.618222956,0.577541861,0.672101798,0.586699795,0.637134968,0.580678859
	}, {4.791241492,1.852130563,3.299729694,2.877756331,2.125911113,1.721343564,2.251792908,2.410755366,1.76184256,2.005149941,2.493505653,1.785914294,2.020244226,1.850004287,2.245878891,1.487799674,1.325923433,2.12700782,2.011570571,1.206889257,0.975396932,1.124947872,3.282217034,1.284004715,1.055281465,1.191701273,1.276721662,1.136982398,1.122978035,1.716812753,0.83124686,0.866241524,0.906558025,1.110824093,0.957206812,0.678513035,0.840606759,0.738202221,0.43589212,0.724479751,0.857281027,1.357116961,1.011682997,0.715519168,1.100175451,0.607314813,0.732612801,1.215008166,0.496113014,1.055130647,1.09728992,0.646540698,0.704420297,0.156219349,0.770786069,0.463980739,0.559989819,0.707958364,0.435095426,0.409396505,0.252350261,0.45967228,0.698000458,0.685193886,0.485292881,0.625679592,0.750651697,0.938112967,0.111112235,0.591258996,0.459822294,1.17329348,0.65298465,0.50899093,0.415748363,0.132405884,0.326628305,0.397771185,0.722818383,0.36415562,0.139281927,0.333133868,0.352971916,0.47959542,0.539202591,0.23977604,0.436697875,0.341897485,0.200606698,0.511266358,0.649761117,0.309996532,0.513333707,0.322188887,0.159234548,0.149515434,0.418335514,0.232606914,0.271682928,0.212159195,0.469919256,0.166571212,0.465252045,0.137063873,0.341379095,0.366433,0.017832035,0.476097319,0.527386088,0.158545749,0.225636174,0.398774928,0.017532476,0.124216291,0.267621706,-0.107852943,0.319959217,-0.369662804,0.375723623,0.626601963,-0.03265441,0.306991416,0.135870534,0.131386905,0.480154691,0.16484867,0.517074025,0.252233421,0.002848189,-0.087871976,0.351594227,0.06741612,0.408464505,0.375532352,-0.128441838,0.349326389,-0.005250673,0.264882094,-0.035791067,0.056673606,0.064757188,0.299068715,0.188895422,0.014673179,0.120446466,-0.002576978,0.013200888,-0.107386694,0.047638903,0.043357417,0.077332686,0.049959027,0.017400407,-0.12939773,0.108321891,-0.370063196,-0.096210474,-0.325109359,-0.122146036,0.132151428,0.016873884,-0.214629359,0.027811531,0.240518228,-0.00635599,0.058072482,-0.056477835,-0.073336517,-0.158054439,-0.014713432,-0.100157142,-0.147598797,-0.167675287,-0.400520664,-0.197126273,-0.121065403,-0.165552714,-0.028396,-0.38052945,-0.223776323,-0.240309035,-0.006565799,-0.224751972,-0.173244919,-0.021643802,-0.050312343,-0.252829985,-0.178374641,-0.132615526,-0.278103738,-0.177531419,-0.328732353,-0.128348395,-0.163490025,-0.07659294,-0.243141483,0.023299478,-0.189727786,-0.005030939,-0.021553978,-0.051248745,-0.10579532,-0.072627743,-0.163645128,-0.167398414,-0.09224092,-0.186103468,-0.113919326,-0.296951404,-0.155869735,-0.171993342,-0.114463011,-0.316763056,-0.244029875,-0.332161053,-0.272810537,-0.324842421,-0.235452399,-0.278992852,-0.199065722,-0.347964548,-0.350503826,-0.371634691,-0.275964961,-0.313738724,-0.350081688,-0.405069345,-0.294264494,-0.318179089,-0.348692132,-0.342713998,-0.272161694,-0.378471829,-0.749098341,-0.558393186,-0.538473464,-0.475474334,-0.466974497,-0.424064267,-0.430409021,-0.521108356,-0.461290512,-0.464235925,-0.538317436,-0.533207716,-0.455778889,-0.449562978,-0.589122975,-0.47716439,-0.314917063,-0.557690071,-0.456701825,-0.591665149,-0.500330091,-0.558116237,-0.484523473,-0.702842143,-0.425117941,-0.618064799,-0.419548626,-0.446367074,-0.687341722,-0.575946715,-0.548968331,-0.648851419,-0.464258026,-0.719246571,-0.510391528,-0.604210656,-0.532357017
	}};
	
	/*
	 * The full set of golf player money rank career curve data - first set = A, second set = B, third set = C, all of which are normalized and centered
	 */
	public static final double[][] _golfPlayerMoneyRankCareerCurves = {{-1.154126408,-1.167844392,-1.161658273,-1.155779765,-1.119736924,-1.140990031,-1.056388062,-1.047487425,-0.934949961,-1.082712571,-0.839068382,-0.575452964,0.780152014,-0.30636678,-0.873417719,-1.098726777,-0.783251238,-0.247076603,-0.80679679,-0.865279913,-1.075183214,-0.466494411,3.79518027,-0.57111828,-0.995206668,-0.84519069,-0.465593229,-0.586302144,-0.162175877,-0.724243241,-0.215957928,0.118903708,-0.265658616,-0.283720802,-0.653639571,-0.527238975,-0.948286609,3.034682269,-0.903927556,0.027572734,-0.51449442,0.321354069,1.883560739,0.601930655,2.022386366,0.89652976,0.709831099,-0.023548128,0.359929093,-0.386740644,2.758479258,-0.571680888,2.19728776,0.351524656,1.436333821,0.861193616,0.244597372,-0.926810138,-0.992547324,-0.58244754,1.286616867,-0.72612144,-0.469230903,1.982820413,1.455498697,-0.708083927,-0.334226765,-0.388519016,-0.630498219,1.067770745,0.959091349,-0.548435376,-0.068881176,-0.352327609,0.272150976,2.773042067,-1.072592704,0.612395441,0.057117585,-0.36880546,0.414313554,0.960411142,0.297785028,-0.169315182,-0.274634786,-0.525927729,0.197200837,-0.353792062,-0.462651492,1.779514749,3.363660052,-0.610732936,-0.608852983,-0.333012515,0.966909369,-0.073655852,-0.874982021,-0.587495257,0.62114428,-0.184432976,-0.630918882,1.475128786,-0.449534209,-0.621746163,-0.241339706,-0.991938566,-0.628864459,1.425783194,1.483013749,0.058564629,-0.316431655,-1.142794297,-0.042449337,-1.038299599,-0.174008264,-0.169998466,1.703535115,0.089397447,0.104936756,-0.683146287,2.703749865,-0.946905584,0.885801795,-0.129419776,-0.695087279,0.80142584,0.156320789,0.11172088,-0.512739551,0.316092826,-0.954374809,-0.360984779,0.187776495,0.578792204,-1.098748701,0.286817385,-0.314354242,0.461919597,2.078220963,-0.434018579,-0.158324087,-0.668601147,1.746383993,0.420521619,0.116666888,0.3268427,0.32001355,0.932411993,-0.067280195,-0.033302769,-0.562459937,-0.476503807,1.225441576,-0.543079905,0.349032744,-0.091361088,-0.532464524,-0.757680997,-0.10608444,-0.196230229,-1.126291037,0.000499492,-0.338312896,-1.066821326,3.315947247,-0.781168272,0.581217981,0.153871335,-0.303530379,-0.290338886,-1.028289921,0.405466166,-0.032380429,-0.955916821,-0.626588031,-0.191370908,-0.927176525
	}, {1.369081812,1.269610212,1.243015667,1.223347262,1.256941614,1.220890118,1.280200348,1.244859436,1.181749297,1.130206436,0.998978677,0.781308339,-0.2156714,0.551128619,0.949028403,1.108347977,0.865999339,0.43371364,0.872536618,0.919026687,1.083974758,0.583851682,-2.916186557,0.666330622,1.01572435,0.887470904,0.561352495,0.655219012,0.285791055,0.771864909,0.329476042,0.037178151,0.371306182,0.384715365,0.705300331,0.593349959,0.963158694,-2.556219079,0.923580934,0.095548958,0.567268215,-0.188281512,-1.603680574,-0.446097929,-1.733611931,-0.716979498,-0.553474511,0.114085296,-0.236855661,0.441920764,-2.450352732,0.607639581,-1.940372833,-0.24304593,-1.242362319,-0.718881093,-0.149820111,0.93293692,0.993047561,0.612233517,-1.126553277,0.744817707,0.503902757,-1.785634445,-1.293519369,0.721548359,0.368059191,0.419226292,0.646051563,-0.966797882,-0.867038199,0.564045338,0.106233044,0.3752928,-0.226622347,-2.627093815,1.063491418,-0.55461904,-0.022301005,0.385981093,-0.369829476,-0.897177004,-0.260186151,0.190315093,0.291875735,0.533289722,-0.16790472,0.365147257,0.469371992,-1.710360041,-3.254611251,0.609000903,0.607012564,0.336255415,-0.946548563,0.072962697,0.864674054,0.579114199,-0.620892217,0.176647219,0.618352737,-1.482361401,0.433162715,0.605045064,0.215473161,0.974971303,0.606543266,-1.479217975,-1.537363541,-0.092723162,0.288163082,1.127910207,0.005735964,1.020165311,0.129377939,0.121918957,-1.837246507,-0.158193219,-0.175050214,0.646827646,-2.887559922,0.920528528,-1.003761182,0.060974233,0.655350621,-0.919817496,-0.241217842,-0.197763588,0.458821477,-0.421719055,0.925597092,0.28812218,-0.299672277,-0.719065103,1.077706512,-0.410557707,0.233469787,-0.603130013,-2.343534251,0.359777976,0.0611179,0.612012533,-1.998931625,-0.568315301,-0.246200605,-0.485516153,-0.494584485,-1.189259691,-0.081425909,-0.120614255,0.471521489,0.368648145,-1.555760359,0.438649816,-0.588527645,-0.085314837,0.418193677,0.675866051,-0.080092943,0.020875095,1.100872298,-0.21277186,0.179763867,1.027075444,-4.264194581,0.676443275,-1.011620024,-0.49438933,0.073301297,0.056695381,0.973422049,-0.813254724,-0.280129287,0.877026332,0.448882939,-0.153705363,0.811169393
	}, {-1.509789904,-1.319749871,-1.289039223,-1.264536223,-1.271831503,-1.21558706,-1.427700868,-1.398238006,-1.266999665,-1.173498403,-1.073945621,-0.88852373,-0.230277787,-0.683303049,-1.029640536,-1.11594269,-0.881153199,-0.588702158,-0.871295846,-0.892769119,-1.108603781,-0.661358205,2.074258075,-0.700226307,-1.021912924,-0.856328441,-0.627061351,-0.681745324,-0.376899569,-0.826494397,-0.397936416,-0.209307308,-0.517713279,-0.491005944,-0.72207409,-0.670390139,-0.915533621,2.02721501,-0.968815754,-0.196162375,-0.553632165,0.061995542,1.315776365,0.236338325,1.436246959,0.498216294,0.398235125,-0.231834868,0.077970809,-0.484892363,2.130926027,-0.662665584,1.599445059,0.157968084,1.023057171,0.50443253,0.115212508,-0.955835576,-0.899243008,-0.556007388,0.957776175,-0.760673311,-0.557682196,1.500078479,1.088143353,-0.727145063,-0.384949205,-0.469740518,-0.664683472,0.824832958,0.733862792,-0.594508359,-0.164521833,-0.428335517,0.190803666,2.385122666,-1.08079802,0.495821384,-0.02541256,-0.345566866,0.255895143,0.745322673,0.227178545,-0.234445935,-0.347278107,-0.494408783,0.092178826,-0.380626999,-0.485782617,1.560198402,3.01974922,-0.587285629,-0.606979368,-0.339449926,0.907917008,-0.068163465,-0.868021408,-0.556808513,0.572881458,-0.178769105,-0.594041871,1.431555501,-0.452343205,-0.610845306,-0.24916428,-0.874213943,-0.638691436,1.426287361,1.472543126,0.112205901,-0.291492717,-1.121114176,0.006995025,-0.926326462,-0.105833089,-0.124972493,1.927664632,0.213625027,0.18573517,-0.665326604,2.986732953,-0.861576861,1.042533317,0.065639845,-0.563493964,0.96545228,0.282585428,0.251997838,-0.383559405,0.530929365,-0.83205369,-0.268333022,0.422711054,0.828745072,-0.975617438,0.503977179,-0.111918936,0.728894536,2.473706146,-0.318305982,0.028795965,-0.548826974,2.201010781,0.660272544,0.309246182,0.69478288,0.600494062,1.404673186,0.28075914,0.195341688,-0.328404553,-0.306065549,1.922299731,-0.358993065,0.830921728,0.210776295,-0.243182886,-0.524191902,0.240051048,0.090225936,-1.108313578,0.411838375,-0.008846998,-0.994227628,5.147921218,-0.561151095,1.489517771,0.849013804,0.246950075,0.174123496,-0.837168581,1.244721194,0.660781287,-0.786552617,-0.211207364,0.529763014,-0.67525571
	}}; 
	
	/*
	 * The full set of PGA and Nationwide player ages (2004-2010)
	 */
	public static final double[] _PGAPlayerAges = {26,35,38,41,24,36,25,42,21,29,31,30,27,40,30,38,27,33,31,29,29,27,34,32,36,35,34,35,29,30,30,33,41,39,33,39,31,32,28,29,36,29,24,32,38,30,32,23,41,35,42,38,39,38,27,40,41,24,44,35,31,27,38,25,36,40,35,42,41,40,36,34,29,35,39,28,35,34,35,30,28,25,37,31,29,35,31,44,36,44,43,29,33,30,45,35,46,45,34,39,45,43,44,34,36,42,38,37,39,46,32,46,43,36,41,39,35,40,31,36,35,46,32,41,36,30,41,32,35,48,42,37,29,47,41,44,35,47,39,36,45,47,47,31,32,36,35,32,34,44,48,37,34,49,46,42,34,51,29,44,42,38,36,49,45,32,48,37,46,37,35,44,43,49,45,37,37,38,38,42,39,42,40,46,38,33,35,36,40,34,28,26,27,36,39,42,25,37,26,43,22,30,32,34,31,37,28,41,31,39,36,28,34,30,30,28,35,37,25,35,36,25,29,30,32,31,31,34,42,40,34,40,30,32,33,29,30,37,30,25,33,39,31,33,28,24,42,36,43,31,39,40,26,34,23,29,39,28,41,42,25,45,36,32,28,39,26,41,36,43,42,41,37,31,35,30,36,40,36,35,36,34,29,30,26,38,32,36,32,45,45,30,44,30,34,31,46,36,36,47,46,35,40,46,44,45,35,43,39,38,31,40,47,33,47,44,37,37,40,36,41,32,42,40,37,38,36,47,33,26,42,37,31,42,33,49,43,30,29,48,35,42,45,48,40,37,46,48,48,33,37,31,36,33,47,47,36,45,37,49,38,35,50,47,39,43,32,35,29,31,26,44,35,37,38,33,33,43,46,52,46,39,30,45,44,43,27,42,39,37,40,37,43,26,30,38,27,44,31,33,32,29,42,32,40,28,24,25,37,29,35,33,31,31,29,36,23,34,38,37,26,36,37,26,30,31,33,32,32,35,43,41,35,31,33,34,30,31,38,31,26,34,32,34,29,25,43,24,37,44,32,40,41,29,35,24,30,40,29,42,43,29,27,26,46,25,37,33,29,40,27,42,43,42,38,32,36,31,37,41,28,32,36,32,42,37,27,24,35,32,31,27,35,39,33,37,33,46,35,46,41,45,43,31,35,32,47,37,48,47,36,47,45,46,36,44,33,40,39,41,48,34,33,48,45,37,38,41,37,42,43,41,29,38,35,37,48,43,38,32,34,50,44,36,34,30,49,43,37,49,26,41,38,43,38,47,49,49,33,39,34,38,32,37,34,36,31,27,48,48,37,37,41,46,38,43,50,39,33,28,28,36,29,38,41,38,44,27,31,39,28,45,24,32,34,36,33,30,27,43,33,41,29,25,26,38,30,36,27,32,30,37,24,29,35,39,38,27,37,38,27,31,32,29,34,33,33,23,32,36,44,42,36,32,34,35,31,32,39,32,27,35,41,33,35,26,44,26,25,38,45,26,33,26,41,42,28,36,25,41,30,43,44,30,28,27,47,26,38,35,28,34,30,41,28,32,28,28,39,43,38,45,44,33,37,32,38,42,31,33,37,33,43,38,28,36,32,28,30,40,34,32,38,34,47,36,39,47,32,36,33,48,38,22,49,36,37,42,48,46,47,39,45,34,41,40,33,42,49,35,29,34,49,39,39,38,43,33,34,44,39,32,38,35,44,39,33,44,35,31,38,51,25,24,45,37,35,37,40,32,31,50,37,26,32,44,47,27,32,38,48,29,24,50,27,42,30,39,42,45,31,32,40,29,46,25,33,35,37,30,34,31,44,34,42,30,26,27,39,37,28,33,33,31,38,25,40,39,28,38,39,28,21,32,33,30,34,34,30,33,37,29,45,43,37,43,33,35,36,32,33,33,28,36,42,34,31,27,45,27,26,39,46,34,27,42,43,28,29,31,37,26,42,31,44,45,31,26,29,28,48,27,39,29,35,31,42,33,29,29,40,44,39,46,45,40,34,38,39,33,39,39,34,38,34,44,39,29,26,33,29,37,41,35,39,35,48,37,24,48,33,45,37,34,37,49,39,23,50,37,49,38,43,49,36,40,27,46,35,42,41,43,50,31,30,35,50,47,39,40,40,45,30,40,43,39,36,34,44,26,34,35,45,44,43,31,24,38,40,37,33,41,39,40,50,30,36,32,32,29,29,45,40,30,30,31,31,40,43,46,29,33,41,30,47,26,34,36,38,35,25,32,29,45,35,43,31,27,28,40,24,32,38,28,36,29,34,34,32,39,26,31,41,30,40,29,39,40,29,22,33,34,31,25,29,35,35,31,34,38,30,46,38,44,34,36,37,33,34,41,34,29,37,43,35,37,32,28,31,46,28,27,40,47,28,35,28,43,44,29,30,32,38,27,33,43,32,45,46,32,27,26,30,27,29,49,28,40,30,36,32,43,30,34,30,37,30,41,45,40,47,46,35,39,40,34,38,40,33,35,39,35,45,34,35,27,38,34,30,38,42,36,40,36,49,49,48,46,34,38,35,30,38,50,40,40,24,51,32,38,50,39,44,50,34,36,25,48,49,37,39,41,28,24,47,36,43,42,35,44,51,37,26,24,42,28,28,32,31,24,36,33,32,41,44,41,47,30,33,34,42,31,48,27,35,37,39,32,36,26,42,33,30,46,36,44,32,28,29,41,25,33,39,29,37,30,35,35,33,40,27,39,22,32,38,42,31,41,30,40,41,30,23,34,35,32,37,26,30,36,36,26,32,35,39,31,47,26,45,39,45,35,37,38,34,35,42,35,30,38,44,36,38,33,29,32,47,29,27,28,35,44,41,48,29,37,36,29,44,45,30,31,33,39,28,34,44,33,46,47,33,28,27,31,28,30,32,50,29,41,38,31,22,37,33,44,31,35,37,31,25,38,31,42,46,41,48,47,46,42,36,23,40,41,35,39,41,45,34,41,28,32,36,40,36,46,41,31,35,36,30,29,28,39,32,36,34,35,29,31,33,39,43,37,35,41,37,50,39,26,42,50,36,45,35,44,49,47
	};
	public static final double[] _NationwidePlayerAges = {28,24,26,24,26,25,24,24,28,26,31,29,29,27,25,27,28,27,25,32,25,30,30,29,30,33,39,29,38,33,35,27,32,31,30,37,35,36,32,30,30,27,34,29,37,26,28,32,28,34,45,37,35,35,31,28,25,36,37,32,45,38,41,34,32,33,32,30,36,32,39,20,38,43,33,39,39,40,38,40,46,47,39,50,47,40,31,31,33,26,32,30,24,38,35,21,34,31,22,28,42,26,41,39,36,36,25,43,39,34,37,44,46,30,36,35,35,34,46,36,27,35,33,36,27,32,27,32,27,29,27,25,27,23,32,25,27,33,26,27,25,30,32,28,23,26,24,33,26,32,33,37,29,31,31,30,31,31,30,34,40,39,42,26,34,28,37,32,38,32,36,27,33,31,41,28,35,30,27,29,36,33,38,24,36,46,25,42,32,38,35,36,32,38,36,38,38,39,43,41,39,37,41,43,33,44,34,37,33,31,33,40,47,41,42,45,44,34,43,40,48,41,32,23,29,22,32,31,23,34,27,33,26,32,33,30,27,34,39,26,36,28,35,28,41,31,32,23,25,29,30,43,27,34,34,42,40,38,37,38,27,35,28,35,28,38,26,25,26,28,27,28,26,22,31,25,33,25,27,34,27,27,27,38,30,37,30,29,38,31,40,27,37,29,41,33,34,38,25,32,39,25,28,38,28,38,32,32,33,42,22,36,31,39,30,27,27,28,29,30,37,24,23,39,31,36,25,26,47,23,36,30,27,45,38,39,34,47,40,46,34,39,39,40,40,44,42,40,38,41,34,45,35,32,34,41,48,43,45,49,40,48,42,24,30,35,33,28,33,24,41,35,28,34,33,31,28,34,31,28,35,40,27,37,37,29,37,35,36,29,42,40,37,43,23,23,32,33,28,31,32,31,24,37,29,26,34,28,20,27,28,41,30,32,34,30,31,25,35,43,39,38,29,25,29,33,31,42,32,44,33,28,36,38,30,34,35,26,40,26,30,44,29,35,33,43,30,23,37,36,40,31,28,29,40,35,39,33,38,37,28,42,40,34,37,31,28,39,40,35,41,47,40,40,38,46,40,41,41,45,39,43,35,35,36,49,44,46,36,39,41,50,50,43,24,29,34,28,25,31,24,36,33,34,38,29,30,25,28,25,29,25,42,28,30,36,26,35,30,31,27,34,26,32,26,29,36,28,30,28,41,28,29,36,38,31,38,31,25,29,27,24,24,28,27,35,30,28,24,30,25,33,27,32,25,36,35,36,44,26,30,33,34,37,30,34,27,31,33,40,43,42,29,31,35,24,23,34,41,27,23,39,25,36,41,33,32,38,27,33,45,39,49,25,28,40,35,41,36,40,39,29,39,43,35,32,29,36,41,47,41,42,46,44,40,44,45,47,37,40,44,43,44,23,25,30,25,35,29,26,32,31,25,27,37,34,35,23,39,25,26,30,31,29,24,37,26,31,43,31,37,27,30,38,36,36,31,33,32,28,32,29,34,28,35,35,29,32,43,33,30,33,26,36,27,34,33,30,31,28,24,27,31,41,25,25,26,34,36,31,37,36,24,45,41,40,27,31,29,31,35,28,32,34,38,41,44,34,43,40,34,41,46,41,37,35,35,46,45,32,39,38,34,42,41,30,31,37,27,26,37,42,34,39,46,40,50,26,29,41,42,35,37,44,49,42,36,31,33,30,37,42,49,47,45,41,45,38,41,38,46,49,48,50,45,44,45,24,26,31,25,31,26,36,30,25,27,33,24,32,26,28,38,35,27,36,24,40,26,27,31,32,28,30,25,31,38,27,32,44,30,32,38,30,28,32,31,39,24,28,25,31,35,29,26,37,23,37,32,25,36,39,41,35,37,26,38,40,42,25,37,44,36,38,27,43,29,29,34,42,47,41,38,36,36,47,45,33,26,39,35,43,38,31,42,32,38,41,28,27,35,34,47,41,27,30,42,43,36,41,37,34,31,50,49,48,39,42,39,47,42,46,45,25,25,27,22,32,26,24,31,32,27,37,31,31,26,26,26,29,28,30,34,25,33,27,24,27,28,27,25,23,29,25,26,29,39,36,25,28,37,36,31,25,33,41,27,28,32,24,26,33,28,28,27,29,31,27,27,26,28,25,28,27,32,27,33,36,31,39,37,28,34,28,29,28
	};
	public static final double[] _PGAEntryAges = {27,26,31,35,26,30,26,24,30,24,30,25,22,29,32,23,25,30,23,36,19,21,22,22,23,23,23,23,24,24,24,24,24,25,25,25,26,26,26,26,26,26,26,27,27,27,27,28,28,28,28,29,29,29,30,30,30,30,31,31,32,32,32,32,32,32,33,33,33,34,34,34,35,35,35,35,35,36,37,38,39,39
	};
	public static final double[] _NationwideEntryAges = {25,28,24,25,25,25,27,24,24,24,27,24,25,23,24,25,25,24,25,24,25,23,25,24,24,20,24,24,26,25,27,25,22,27,28,27,24,24,24,27,25,28,28,22,28,31,27,30,31,25,32,23,25,24,25,33,25,25,25,27,25,23,25,25,31,24,26,24,24,25,27,28,32,27,24,33,23,29,28,27,28,25,25,31,25,25,32,26,28,25,27,29,30,29,29,28,26,27,29,23,30,24,29,24,28,30,29,30,28,26,28,24,31,32,30,25,33,24,30,27,25,23,25,30,23,25,32,25,30,28,23,32,26,34,27,26,26,25,29,27,26,25,22,24,29,28,30,32,25,23,27,25,29,28,27,24,23,29,29,27,27,27,24,30,26,33,42,23,25,25,36,27,26,34,27,26,32,26,25,26,35,39,25,26,24,25,25,31,27,32,26,26,28,30,26,29,25,25,34,25,27,28,34,29,27,23,29,26,35,26,31,28,25,33,33,27,25,26,24,26,25,27,30,27,30,25,25,36,29,27,35,32,26,30,26,25,27,25,26,26,27,29,25,34,26,26,25,32,23,38,27,31,27,36,26,30,26,26,37,47,27,33,34,25,26,27,28,23,28,36,33,33,27,25,28,34,28,28,25,24,29,29,34,39,32,38,29,29,27,23,25,24,22,31,25,24,31,29,25,32,31,28,26,25,26,29,23,30,29,24,31,27,24,27,28,22,25,23,29,25,26,27,28,33,25,27,31,31,31,23,33,38,25,26,25,24,26,30,28,25,27,28,28,27,27,24,25,25,28,27,29,27,33,36,31,37,31,23,34,28,29,28,24,31,38,28,30,29,30,26,32,30,24,24,28,25,27,35,29,26,33,23,36,30,25,25,31,28,32,26,34,27,28,35,29,32,34,31,26,33,26,30,26,26,30,30,31,24,24,27,26,27,34,28,30,28,34,23,29,36,27,31,36,31,25,29,27,21,28,32,35,26,25,32,40,31,34,23,23,31,29,28,31,32,31,22,26,25,28,26,32,25,34,24,39,39,38,27,23,24,35,36,25,36,27,34,37,39,32,30,27,31,35,27,32,36,27,27,29,36,25,29,23,31,27,39,21,34,31,26,27,27,33,24,35,31,24,31,36,23,27,32,34,26,27,38,27,34,24,26,28,30,32,31,34,30,27,30,25,31,23,27,34,26,25,32,25,41,26,30,25,38,30,47,27,26,29,34,36,28,37,23,43,26,25,27,25,42,28,30,36,29,25,27,25,32,23,27,27,38,28,30,31,37,29,24,27,32,30,29,29,33,37,27,22,34,27,30,47,42,35,28,28,35,29,37,33,30,29,30,33,34,25,35,32,35,46,31,24,30,29,26,29,30,27,37,16,26,30,27,37,29
	};
	
	/*
	 * Sample distribution for the A column of the player career curves
	 */
	public static jsc.goodnessfit.SampleDistributionFunction _golfPlayerCareerCurvesDistribution = new jsc.goodnessfit.SampleDistributionFunction(_golfPlayerCareerCurves[0]);
	
	/*
	 * Sample distribution for the A column of the player money rank career curves
	 */
	public static jsc.goodnessfit.SampleDistributionFunction _golfPlayerMoneyRankCareerCurvesDistribution = new jsc.goodnessfit.SampleDistributionFunction(_golfPlayerMoneyRankCareerCurves[0]);

	/*
	 * Sample distribution for PGA and Nationwide player ages (2004-2010)
	 */
	public static jsc.goodnessfit.SampleDistributionFunction _PGAPlayerAgesDistribution = new jsc.goodnessfit.SampleDistributionFunction(_PGAPlayerAges);
	public static jsc.goodnessfit.SampleDistributionFunction _NationwidePlayerAgesDistribution = new jsc.goodnessfit.SampleDistributionFunction(_NationwidePlayerAges);
	public static jsc.goodnessfit.SampleDistributionFunction _PGAEntryAgesDistribution = new jsc.goodnessfit.SampleDistributionFunction(_PGAEntryAges);
	public static jsc.goodnessfit.SampleDistributionFunction _NationwideEntryAgesDistribution = new jsc.goodnessfit.SampleDistributionFunction(_NationwideEntryAges);

	/*
	 * Builds the initial player ISL CDF from data stored in a csv file
	 */
	public static double[][] getInitialPlayerISLCDF(String fileName){
		double[][] outputCDF = null;
		ArrayList<String> PGAPlayerISL = new ArrayList<String>();
		double[] PGAPlayerISLArray;
		jsc.goodnessfit.SampleDistributionFunction PGAPlayerISLDistribution;
		try{
			File PGAfile = new File(fileName);
			BufferedReader PGAreader = new BufferedReader(new FileReader(PGAfile));
			String text = null;
			while(null != (text = PGAreader.readLine())){
				PGAPlayerISL.add(text);
			}
			PGAPlayerISLArray = new double[PGAPlayerISL.size()];
			for(int i = 0; i < PGAPlayerISLArray.length; i++){
				PGAPlayerISLArray[i] = Double.parseDouble(PGAPlayerISL.get(i));
			}
			PGAPlayerISLDistribution = new jsc.goodnessfit.SampleDistributionFunction(PGAPlayerISLArray);
			outputCDF = convertSampleDistributionToCDFDiscrete(PGAPlayerISLDistribution);
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return outputCDF;
	}
	
	/*
	 * Gets the CDF from a sample distribution function (discrete variables only)
	 */
	public static double[][] convertSampleDistributionToCDFDiscrete(jsc.goodnessfit.SampleDistributionFunction inputSDF){
		double[] orderedS = inputSDF.getOrderedS();
		double[] orderedX = inputSDF.getOrderedX();
		int numValues = 0;
		double lastValue = Integer.MAX_VALUE;
		for(int i = 0; i < orderedX.length; i++){
			if(orderedX[i] != lastValue){
				numValues++;
				lastValue = orderedX[i];
			}
		}

		double[][] outputCDF = new double[2][numValues];
		lastValue = Integer.MAX_VALUE;
		int count = 0;
		for(int i = 0; i < orderedX.length; i++){
			if(orderedX[i] != lastValue){
				outputCDF[0][count] = orderedS[i];
				outputCDF[1][count] = orderedX[i];
				lastValue = orderedX[i];
				count++;
			}
		}
		
//		for(int i = 0; i < outputCDF[0].length; i++){
//			System.out.print(outputCDF[0][i] + "   ");
//			System.out.print(outputCDF[1][i] + "\n");
//		}
		
		return outputCDF;
	}
	
	/*
	 * Samples an Integer from the given CDF
	 */
	public static int sampleIntFromCDF(double[][] CDF){
		Random generator = new Random();
		double roll = (double)(generator.nextInt(100000)+1) / 100000.0;
		for(int i = 0; i < CDF[0].length; i++){
			if(roll <= CDF[0][0]){
				return (int)CDF[1][0];
			}
			else if(roll > CDF[0][i] && roll <= CDF[0][i+1]){
				return (int)CDF[1][i+1];
			}
		}
		return -1;
	}
	
	/*
	 * Samples a Double from the given CDF
	 */
	public static double sampleDoubleFromCDF(double[][] CDF){
		Random generator = new Random();
		double roll = (double)(generator.nextInt(1000000)+1) / 1000000.0;
		for(int i = 0; i < CDF[0].length; i++){
			if(roll <= CDF[0][0]){
				return CDF[1][0];
			}
			else if(roll > CDF[0][i] && roll <= CDF[0][i+1]){
				return CDF[1][i+1];
			}
		}
		return -1;
	}
	
	/*
	 * Samples a value from linear regression
	 */
	public static double linRegSample(double X, double M, double B, double RMSE){
		Random generator = new Random();
		double Y = 0;
		Y = M * X + B;
		Y = Y + (generator.nextGaussian() * RMSE);
		return Y;
	}
	
	/*
	 * Samples a value from quadratic regression
	 */
	public static double quadraticRegSample(double X, double A, double B, double C, double RMSE){
		Random generator = new Random();
		double Y = 0;
		Y = (A * Math.pow(X,2)) + (B * X) + C;
		Y = Y + (generator.nextGaussian() * RMSE);
		return Y;
	}
	
	/*
	 * Samples a round score from player ISL
	 */
	public static double sampleRoundScore(double ISL){
//		if(_golfPlayerRoundScoreDistribution70half == null){
//			_golfPlayerRoundScoreDistribution70half = getInitialPlayerISLCDF("Golf/Input/PGA sample distribution 70half.csv");
//			_golfPlayerRoundScoreDistribution71half = getInitialPlayerISLCDF("Golf/Input/PGA sample distribution 71half.csv");
//			_golfPlayerRoundScoreDistribution72half = getInitialPlayerISLCDF("Golf/Input/PGA sample distribution 72half.csv");
//			_golfPlayerRoundScoreDistribution72halfplus = getInitialPlayerISLCDF("Golf/Input/PGA sample distribution 72halfplus.csv");
//		}
		
		if(ISL < 70.501)
			return ISL + sampleDoubleFromCDF(_golfPlayerRoundScoreDistribution70half);
		else if(ISL < 71.501)
			return ISL + sampleDoubleFromCDF(_golfPlayerRoundScoreDistribution71half);
		else if(ISL < 72.501)
			return ISL + sampleDoubleFromCDF(_golfPlayerRoundScoreDistribution72half);
		else
			return ISL + sampleDoubleFromCDF(_golfPlayerRoundScoreDistribution72halfplus);
	}
	
	/*
	 * Generates new players
	 */
	public static ArrayList<Golf.Player> generatePlayers(int numToGenerate, boolean initialize, boolean PGA, boolean fullTime, boolean placeholder){
		double[][] PGAISLCDF = getInitialPlayerISLCDF("Golf/Input/PGA yearly adjusted.csv");
		double[][] NationwideISLCDF = getInitialPlayerISLCDF("Golf/Input/Nationwide yearly adjusted.csv");
		double[][] PGAEntryISLCDF = getInitialPlayerISLCDF("Golf/Input/PGA entry adjusted.csv");
		double[][] NationwideEntryISLCDF = getInitialPlayerISLCDF("Golf/Input/Nationwide entry adjusted.csv");
		double[][] PGAPartTimeISLCDF = getInitialPlayerISLCDF("Golf/Input/PGA part-time adjusted.csv");
		double[][] NationwidePartTimeISLCDF = getInitialPlayerISLCDF("Golf/Input/Nationwide part-time adjusted.csv");
		double[][] agePGACDF = convertSampleDistributionToCDFDiscrete(_PGAPlayerAgesDistribution);
		double[][] ageNationwideCDF = convertSampleDistributionToCDFDiscrete(_NationwidePlayerAgesDistribution);
		double[][] agePGAEntryCDF = convertSampleDistributionToCDFDiscrete(_PGAEntryAgesDistribution);
		double[][] ageNationwideEntryCDF = convertSampleDistributionToCDFDiscrete(_NationwideEntryAgesDistribution);
		double[][] careerCurveCDF = convertSampleDistributionToCDFDiscrete(_golfPlayerMoneyRankCareerCurvesDistribution);

		ArrayList<Golf.Player> players = new ArrayList<Golf.Player>();
		
		int age = 0;
		double ISL = 0;
		double expectedRank = 0;
		double playingProbability = 0.0;
//		double careerCurveParamA = 0.0;
//		double careerCurveParamB = 0.0;
//		double careerCurveParamC = 0.0;
//		double careerCurveParamANormalized = 0.0;
//		double careerCurveParamBNormalized = 0.0;
//		double careerCurveParamCNormalized = 0.0;
//		double careerCurveParamAMean = 0.014081183;
//		double careerCurveParamBMean = -0.948865269;
//		double careerCurveParamCMean = 87.30803276;
//		double careerCurveParamAStdev = 0.011860989;
//		double careerCurveParamBStdev = 0.772737463;
//		double careerCurveParamCStdev = 13.0842002;
		double careerCurveRMSE = 0.448535653;
		
		double careerCurveParamAMoney = 0.0;
		double careerCurveParamBMoney = 0.0;
		double careerCurveParamCMoney = 0.0;
		double careerCurveParamANormalizedMoney = 0.0;
		double careerCurveParamBNormalizedMoney = 0.0;
		double careerCurveParamCNormalizedMoney = 0.0;
		double careerCurveParamAMeanMoney = 0.993083961;
		double careerCurveParamBMeanMoney = -63.33699594;
		double careerCurveParamCMeanMoney = 1079.972418;
		double careerCurveParamAStdevMoney = 0.830532599;
		double careerCurveParamBStdevMoney = 53.59777672;
		double careerCurveParamCStdevMoney = 896.5736504;
		double careerCurveRMSEMoney = 31.68909266;
		
		Random generator = new Random();
		double roll = 0;

//		double paramA = -0.64478;
//		double paramB = 0.97011;
//		double paramC = 0.85057;
//		double paramD = 0.34593;
//		double paramE = 1.56103;
//		double paramF = 0.00006;
//		double paramG = -2.08907;
		
		double paramAMoney = -1.17218;
		double paramBMoney = -0.74582;
		double paramCMoney = -2.15109;
		double paramDMoney = 9.99047;
		double paramEMoney = 1.15612;
		double paramFMoney = 13.37566;
		double paramGMoney = -13.94112;

		int index = 0;
		while(index < numToGenerate){

			boolean careerCurveFits = false;
			while(!careerCurveFits){

				if(fullTime){
					if(initialize){
						if(PGA){
							ISL = Double.valueOf((new DecimalFormat("#.##")).format(sampleDoubleFromCDF(PGAISLCDF)));
//							ISL = Double.valueOf((new DecimalFormat("#.##")).format(71.10917 + (0.786464 * generator.nextGaussian())));
						}
						else{
							ISL = Double.valueOf((new DecimalFormat("#.##")).format(sampleDoubleFromCDF(NationwideISLCDF)));
//							ISL = Double.valueOf((new DecimalFormat("#.##")).format(72.11377 + (0.772535 * generator.nextGaussian())));
						}
					}
					else{
						if(PGA){
							ISL = Double.valueOf((new DecimalFormat("#.##")).format(sampleDoubleFromCDF(PGAEntryISLCDF)));
						}
						else{
							ISL = Double.valueOf((new DecimalFormat("#.##")).format(sampleDoubleFromCDF(NationwideEntryISLCDF)));
						}
					}

					// Sample player age using empirical distribution for PGA, Nationwide, and newly entered players
					if(initialize){
						if(PGA){
							age = sampleIntFromCDF(agePGACDF);
//							roll = (double)(generator.nextInt(10000)+1) / 10000.0;
//							for(int i = 1; i < agePGACDF[0].length; i++){
//							if(roll <= agePGACDF[0][0]){
//							age = (int)agePGACDF[1][0];
//							break;
//							}
//							else if(roll > agePGACDF[0][i] && roll <= agePGACDF[0][i+1]){
//							age = (int)agePGACDF[1][i+1];
//							break;
//							}
//							}
						}
						else{
							age = sampleIntFromCDF(ageNationwideCDF);
//							roll = (double)(generator.nextInt(10000)+1) / 10000.0;
//							for(int i = 1; i < ageNationwideCDF[0].length; i++){
//							if(roll <= ageNationwideCDF[0][0]){
//							age = (int)ageNationwideCDF[1][0];
//							break;
//							}
//							else if(roll > ageNationwideCDF[0][i] && roll <= ageNationwideCDF[0][i+1]){
//							age = (int)ageNationwideCDF[1][i+1];
//							break;
//							}
//							}
						}
					}
					else{
						if(PGA){
							age = sampleIntFromCDF(agePGAEntryCDF);
						}
						else{
							age = sampleIntFromCDF(ageNationwideEntryCDF);
//							roll = (double)generator.nextInt(10000) / 10000.0;
//							for(int i = 1; i < ageNationwideEntryCDF[0].length; i++){
//							if(roll <= ageNationwideEntryCDF[0][0]){
//							age = (int)ageNationwideEntryCDF[1][0];
//							break;
//							}
//							else if(roll > ageNationwideEntryCDF[0][i] && roll <= ageNationwideEntryCDF[0][i+1]){
//							age = (int)ageNationwideEntryCDF[1][i+1];
//							break;
//							}
//							}
						}
					}
				}
				else{
					if(!placeholder){
						if(PGA){
							ISL = Double.valueOf((new DecimalFormat("#.##")).format(sampleDoubleFromCDF(PGAPartTimeISLCDF)));
							age = sampleIntFromCDF(agePGACDF);
						}
						else{
							ISL = Double.valueOf((new DecimalFormat("#.##")).format(sampleDoubleFromCDF(NationwidePartTimeISLCDF)));
							age = sampleIntFromCDF(ageNationwideCDF);
						}
					}
					else{
						if(PGA){
							ISL = 73.38458789;
							age = sampleIntFromCDF(agePGACDF);
						}
						else{
							ISL = 74.45381923;
							age = sampleIntFromCDF(ageNationwideCDF);
						}

					}
				}

//				careerCurveParamANormalized = linRegSample(ISL, 0.5745, -41.4759, 0.3069782);

				// Generate careerCurveParamANormalized from empirical distribution function represented by the following function
				roll = (double)(generator.nextInt(10000)+1) / 10000.0;
    			// The sample distribution for careerCurveParamANormalized
//    			careerCurveParamANormalized = (paramA + paramB*(roll) + paramC*Math.pow(roll,2) + paramD*Math.pow(roll,3))/(1 + paramE*(roll) + paramF*Math.pow(roll,2) + paramG*Math.pow(roll,3)); 
//    			if(initialize){
//    				careerCurveParamANormalizedMoney = linRegSample(ISL, 0.5895, -41.9094, 0.9535489);
//				}
//    			else{
//        			careerCurveParamANormalizedMoney = (paramAMoney + paramBMoney*(roll) + paramCMoney*Math.pow(roll,2) + paramDMoney*Math.pow(roll,3))/(1 + paramEMoney*(roll) + paramFMoney*Math.pow(roll,2) + paramGMoney*Math.pow(roll,3)); 
//    			}
//    			careerCurveParamANormalizedMoney = -1 + ((double)(generator.nextInt(50000)+1) / 10000.0);
    			careerCurveParamANormalizedMoney = sampleDoubleFromCDF(careerCurveCDF);
//    			careerCurveParamANormalizedMoney = generator.nextGaussian()*1.20 + 1.5;
//    			boolean aaa = generator.nextBoolean();
//    			if(aaa)
//    				careerCurveParamANormalizedMoney = generator.nextGaussian()*0.70 + 0.5;
//    			else
//    				careerCurveParamANormalizedMoney = generator.nextGaussian()*0.70 + 2.5;
    			
				// Generate careerCurveParamBNormalized using a linear function based on the CareerCurveParamANormalized value
//    			careerCurveParamBNormalized = linRegSample(careerCurveParamANormalized, -.98278900376641, -.00833490106813718, 0.1277181);
//  			careerCurveParamBNormalized = linRegSample(careerCurveParamANormalized, -.98278900376641, -.00833490106813718, 0.0677181);
    			careerCurveParamBNormalizedMoney = linRegSample(careerCurveParamANormalizedMoney, -0.9850, 0, 0.1735611);

    			// Generate careerCurveParamCNormalized using a linear function based on the CareerCurveParamANormalized value
//    			careerCurveParamCNormalized = linRegSample(careerCurveParamANormalized, .9442360515534, .0139308239038308, 0.2580516);
//  			careerCurveParamCNormalized = linRegSample(careerCurveParamANormalized, .9442360515534, .0139308239038308, 0.1280516);
    			careerCurveParamCNormalizedMoney = linRegSample(careerCurveParamANormalizedMoney, 0.9418, 0, 0.6381138);

    			// Denormalize and decentralize the careerCurveParams
//    			careerCurveParamA = (careerCurveParamANormalized * careerCurveParamAStdev) + careerCurveParamAMean;
//    			careerCurveParamB = (careerCurveParamBNormalized * careerCurveParamBStdev) + careerCurveParamBMean;
//    			careerCurveParamC = (careerCurveParamCNormalized * careerCurveParamCStdev) + careerCurveParamCMean;
    			careerCurveParamAMoney = (careerCurveParamANormalizedMoney * careerCurveParamAStdevMoney) + careerCurveParamAMeanMoney;
    			careerCurveParamBMoney = (careerCurveParamBNormalizedMoney * careerCurveParamBStdevMoney) + careerCurveParamBMeanMoney;
    			careerCurveParamCMoney = (careerCurveParamCNormalizedMoney * careerCurveParamCStdevMoney) + careerCurveParamCMeanMoney;

    			// Verify that the career curve fits the sampled ISL for this player, if not then generate new career curve
//    			double verifyCareerCurveISL = quadraticRegSample(age, careerCurveParamA, careerCurveParamB, careerCurveParamC, 0.0);
//    			double maxAge = -careerCurveParamB / (2*careerCurveParamA);
//    			if(verifyCareerCurveISL < (ISL + (careerCurveRMSE)) && verifyCareerCurveISL > (ISL - (careerCurveRMSE)) 
//    					&& 0 >= (careerCurveParamA * 2 * (maxAge - 3) + careerCurveParamB)){
//    				careerCurveFits = true;
//    			}
    			expectedRank = quadraticRegSample(age, careerCurveParamAMoney, careerCurveParamBMoney, careerCurveParamCMoney, 0.0);
    			double verifyCareerCurveISL = Math.exp((4.226485)/(1-(0.008565512)*(Math.log(expectedRank))+(8.160515E-03)*Math.pow(Math.log(expectedRank), 2)-(3.838415E-03)*Math.pow(Math.log(expectedRank), 3)+(7.932228E-04)*Math.pow(Math.log(expectedRank), 4)-(5.995422E-05)*Math.pow(Math.log(expectedRank), 5))); 
    			double careerBestAge = (-careerCurveParamBMoney / (2*careerCurveParamAMoney));
    			double careerBestRank = careerCurveParamAMoney*Math.pow(careerBestAge, 2) + careerCurveParamBMoney*careerBestAge + careerCurveParamCMoney;
    			if(verifyCareerCurveISL < (ISL + (2*careerCurveRMSE)) && verifyCareerCurveISL > (ISL - (2*careerCurveRMSE))
    					&& careerBestRank >= -10 && careerBestRank <= 350){
    				careerCurveFits = true;
    			}
//    			else{
//    				System.out.println("Resample");
//    			}
    		
    		}
    		
			// Sample playing probability from multiple regression using age and ISL built from empirical distribution
			if(fullTime){
				if(PGA){
					playingProbability = (-22.998915123649 - (0.201317971471147*age) + (0.790749879196105*ISL)) / 45.0;
				}
				else{
					playingProbability = (88.2401364635201 - (0.196965752117979*age) - (0.832661124943235*ISL)) / 30.0;
				}
			}
			else{
				playingProbability = 0.25 + generator.nextGaussian()*0.05;
			}
			
			// Temporarily use standard deviation to sample player scores
			double stdGeneratingRatingMean = 70.98874174;
			double stdGeneratingRatingStdev = 1.005276;
			double stdGeneratingStdMean = 2.827590179;
			double stdGeneratingStdStdev = 0.489190309;
    		double standardDeviation = Double.valueOf((new DecimalFormat("#.##")).format(((((ISL-stdGeneratingRatingMean)/stdGeneratingRatingStdev) * 0.175) + (0.9848123 * generator.nextGaussian()) * stdGeneratingStdStdev) + stdGeneratingStdMean));

    		String playerName = "";
    		String pga = "PGA";
    		if(!PGA)
    			pga = "Nat";
    		if(fullTime){
    			playerName = "Player " + pga + " " + numPlayersCreated;
    			numPlayersCreated++;
    		}
    		else if(!placeholder){
    			playerName = "Part-Time Player " + pga + " " + numPartTimeCreated;
    			numPartTimeCreated++;
    		}
    		else{
    			playerName = "Placeholder Player " + pga + " " + numPlaceholderCreated;
    			numPlaceholderCreated++;
    		}
//			Golf.Player player = new Golf.Player(playerName, ISL, standardDeviation, age, careerCurveParamA, careerCurveParamB, careerCurveParamC, playingProbability);
			Golf.Player player = new Golf.Player(playerName, expectedRank, ISL, standardDeviation, age, careerCurveParamAMoney, careerCurveParamBMoney, careerCurveParamCMoney, playingProbability, fullTime, placeholder);
			players.add(player);
			index++;
		}
		
		return players;
	}
}
