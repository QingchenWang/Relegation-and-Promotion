package General;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UserInterface.java
 *
 * Created on 27-Jun-2010, 1:39:45 PM
 */

/**
 *
 * @author Qingchen
 */


import javax.swing.table.DefaultTableModel;
import javax.swing.JFileChooser;

import Basketball.League;
import Basketball.RPPRules;
import Basketball.SchedulingRules;
import Basketball.Team;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Random;

public class UserInterface extends javax.swing.JFrame {
	
	public static boolean TEST_MODE = true;
	public static String NBA = "National Basketball Association";
	public static String NFL = "National Football League";
	public static String MLB = "Major League Baseball";
	public static String EPL = "English Premier League";
	public static String PGA = "Professional Golf Association";

    /** Creates new form UserInterface */
    public UserInterface() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        teamInputTable = new javax.swing.JTable();
        initialTeamDataLabel = new javax.swing.JLabel();
        addMoreTeamsButton = new javax.swing.JButton();
        importTeamDataButton = new javax.swing.JButton();
        scheduleTypeLabel = new javax.swing.JLabel();
        scheduleTypeComboBox = new javax.swing.JComboBox();
        numGamesAgainstDivLabel = new javax.swing.JLabel();
        numGamesAgainstDivTextField = new javax.swing.JTextField();
        numRelegatePromoteLabel = new javax.swing.JLabel();
        numTeamsRelegatePromoteTextField = new javax.swing.JTextField();
        numYearsToRunLabel = new javax.swing.JLabel();
        numYearsToRunTextField = new javax.swing.JTextField();
        sportLeagueTypeLabel = new javax.swing.JLabel();
        sportLeagueTypeComboBox = new javax.swing.JComboBox();
        simulateButton = new javax.swing.JButton();
        numGamesAgainstOutLabel = new javax.swing.JLabel();
        numGamesAgainstOutTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        leagueResultsTable = new javax.swing.JTable();
        simulationResultsLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        leagueResultsAverageTable = new javax.swing.JTable();
        simulationResultsAverageLabel = new javax.swing.JLabel();
        importPlayerDataButton = new javax.swing.JButton();
        samplePlayerDataButton = new javax.swing.JButton();
        numPGARemainLabel = new javax.swing.JLabel();
        numPGARemainTextField = new javax.swing.JTextField();
        numPGAFromNationwideLabel = new javax.swing.JLabel();
        numPGAFromNationwideTextField = new javax.swing.JTextField();
        numPGAFromTournamentLabel = new javax.swing.JLabel();
        numPGAFromTournamentTextField = new javax.swing.JTextField();
        numNationwideNewLabel = new javax.swing.JLabel();
        numNationwideNewTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sports League Simulator");

        teamInputTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        teamInputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(teamInputTable);

        initialTeamDataLabel.setText("Initial Team Data");

        addMoreTeamsButton.setText("Add More Teams");
        addMoreTeamsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMoreTeamsButtonActionPerformed(evt);
            }
        });

        importTeamDataButton.setText("Import Team Data");
        importTeamDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importTeamDataButtonActionPerformed(evt);
            }
        });

        scheduleTypeLabel.setText("Schedule Type:");

        scheduleTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All games within division", "Half in half out", "No division barriers" }));

        numGamesAgainstDivLabel.setText("Number of games against each team within division:");

        numRelegatePromoteLabel.setText("Number of teams to relegate and promote (same number for all divisions):");

        numYearsToRunLabel.setText("Number of years to run simulation:");

        numYearsToRunTextField.setText("1000");

        sportLeagueTypeLabel.setText("Sport League Type:");

        sportLeagueTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "National Basketball Association", "National Football League", "Major League Baseball", "English Premier League", "Professional Golf Association" }));

        simulateButton.setText("Simulate!!!");
        simulateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulateButtonActionPerformed(evt);
            }
        });

        numGamesAgainstOutLabel.setText("Number of games against each team out of division:");

        leagueResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                " ", " ", " ", " ", " ", " "
            }
        ));
        leagueResultsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(leagueResultsTable);

        simulationResultsLabel.setText("Simulation Results");

        leagueResultsAverageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", ""
            }
        ));
        leagueResultsAverageTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(leagueResultsAverageTable);

        simulationResultsAverageLabel.setText("Average Results");

        importPlayerDataButton.setText("Import Player Data PGA");
        importPlayerDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importPlayerDataButtonActionPerformed(evt);
            }
        });

        samplePlayerDataButton.setText("Sample Players PGA");
        samplePlayerDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                samplePlayerDataButtonActionPerformed(evt);
            }
        });

        numPGARemainLabel.setText("Number of PGA players remain:");

        numPGAFromNationwideLabel.setText("Number of PGA from Nationwide:");

        numPGAFromTournamentLabel.setText("Number of PGA from tournament:");

        numNationwideNewLabel.setText("Number of new Nationwide players:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(initialTeamDataLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(scheduleTypeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scheduleTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sportLeagueTypeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sportLeagueTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(numYearsToRunLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numYearsToRunTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(numRelegatePromoteLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numTeamsRelegatePromoteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addMoreTeamsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(importTeamDataButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(importPlayerDataButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(samplePlayerDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 174, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(simulationResultsAverageLabel)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
                                .addComponent(simulationResultsLabel))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(numGamesAgainstOutLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(numGamesAgainstOutTextField))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(numGamesAgainstDivLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(numGamesAgainstDivTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(numPGAFromNationwideLabel)
                                        .addComponent(numPGARemainLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(simulateButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(numPGAFromNationwideTextField, 0, 0, Short.MAX_VALUE)
                                .addComponent(numPGARemainTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(numNationwideNewLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(numPGAFromTournamentLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(numNationwideNewTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                                .addComponent(numPGAFromTournamentTextField, 0, 0, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 704, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initialTeamDataLabel)
                    .addComponent(simulationResultsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addMoreTeamsButton)
                    .addComponent(importTeamDataButton)
                    .addComponent(importPlayerDataButton)
                    .addComponent(simulationResultsAverageLabel)
                    .addComponent(samplePlayerDataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sportLeagueTypeLabel)
                            .addComponent(sportLeagueTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(scheduleTypeLabel)
                            .addComponent(scheduleTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numGamesAgainstDivLabel)
                    .addComponent(numGamesAgainstDivTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numPGARemainLabel)
                    .addComponent(numPGARemainTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numPGAFromTournamentLabel)
                    .addComponent(numPGAFromTournamentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numGamesAgainstOutLabel)
                    .addComponent(numGamesAgainstOutTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numPGAFromNationwideLabel)
                    .addComponent(numPGAFromNationwideTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numNationwideNewLabel)
                    .addComponent(numNationwideNewTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numRelegatePromoteLabel)
                    .addComponent(numTeamsRelegatePromoteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numYearsToRunLabel)
                    .addComponent(numYearsToRunTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(simulateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(125, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addMoreTeamsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMoreTeamsButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel)(teamInputTable.getModel());
        model.addRow(new String[teamInputTable.getColumnCount()]);
        teamInputTable.setModel(model);
    }//GEN-LAST:event_addMoreTeamsButtonActionPerformed

    private void importTeamDataButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                     
    	int returnVal = 0;
    	JFileChooser fileChooser = new JFileChooser();
    	if(!TEST_MODE){    
    		returnVal = fileChooser.showOpenDialog(this);
    	}
    	else{
    		returnVal = JFileChooser.APPROVE_OPTION;
    	}

    	if(returnVal == JFileChooser.APPROVE_OPTION) {
    		try{
    			BufferedReader reader;
    			if(!TEST_MODE){
    				reader = new BufferedReader(new FileReader(fileChooser.getSelectedFile()));
    			}
    			else{
    				reader = new BufferedReader(new FileReader(new File("NBA/Input/TeamData.csv")));
    			}
    	
    			String text = null;
    			DefaultTableModel model = new DefaultTableModel(new String[]{"Team", "Division", "Rating", "Mean", "Alpha", "RMSE"}, 0);
    			reader.readLine();
    			while ((text = reader.readLine()) != null){
    				String[] teamString = text.split(",");
    				model.addRow(teamString);
    			}
    			reader.close();
    			teamInputTable.setModel(model);
    		}catch (Exception e){
    			e.printStackTrace();
    		}
    	}
    }
    
    private void importPlayerDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importPlayerDataButtonActionPerformed
    	int returnVal = 0;
    	JFileChooser fileChooser = new JFileChooser();
    	if(!TEST_MODE){    
    		returnVal = fileChooser.showOpenDialog(this);
    	}
    	else{
    		returnVal = JFileChooser.APPROVE_OPTION;
    	}

    	if(returnVal == JFileChooser.APPROVE_OPTION) {
    		try{
    			BufferedReader reader;
    			if(!TEST_MODE){
    				reader = new BufferedReader(new FileReader(fileChooser.getSelectedFile()));
    			}
    			else{
    				reader = new BufferedReader(new FileReader(new File("Golf/Input/PlayerData.csv")));
    			}
    	
    			String text = null;
    			DefaultTableModel model = new DefaultTableModel(new String[]{"Player", "Division", "Rating", "Stdev Rating", "Full Time"}, 0);
    			reader.readLine();
    			while ((text = reader.readLine()) != null){
    				String[] playerString = text.split(",");
    				model.addRow(playerString);
    			}
    			reader.close();
    			teamInputTable.setModel(model);
    		}catch (Exception e){
    			e.printStackTrace();
    		}
    	}
    }//GEN-LAST:event_importPlayerDataButtonActionPerformed

    private void samplePlayerDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_samplePlayerDataButtonActionPerformed
    	samplePGAPlayers();
    	
    }//GEN-LAST:event_samplePlayerDataButtonActionPerformed
    
    private void samplePGAPlayers(){
		DefaultTableModel model = new DefaultTableModel(new String[]{"Player", "Division", "Expected Rank", "ISL", "Stdev of ISL", "Age", "A", "B", "C", "Playing Probability", "Full Time", "Placeholder"}, 0);
		
		boolean initialize = true;
		boolean PGA = true;
		boolean Nationwide = false;
		boolean fullTime = true;
		boolean placeholder = false;
		ArrayList<Golf.Player> PGAPlayers = Utility.generatePlayers(180, initialize, PGA, fullTime, placeholder);
		ArrayList<Golf.Player> NationwidePlayers = Utility.generatePlayers(140, initialize, Nationwide, fullTime, placeholder);
		
		for(int i = 0; i < PGAPlayers.size(); i++){
			model.addRow(new String[]{PGAPlayers.get(i).getName(), Integer.toString(Utility.PGA_DIVISION), Double.toString(PGAPlayers.get(i).getExpectedRank()), 
					Double.toString(PGAPlayers.get(i).getRating()), Double.toString(PGAPlayers.get(i).getStdevRating()), 
					Integer.toString(PGAPlayers.get(i).getAge()), Double.toString(PGAPlayers.get(i).getCareerCurveVariableA()), 
					Double.toString(PGAPlayers.get(i).getCareerCurveVariableB()), Double.toString(PGAPlayers.get(i).getCareerCurveVariableC()), 
					Double.toString(PGAPlayers.get(i).getPlayingProbability()), Boolean.toString(PGAPlayers.get(i).getFullTime()), Boolean.toString(PGAPlayers.get(i).getPlaceholder())});
		}
		
		for(int i = 0; i < NationwidePlayers.size(); i++){
			model.addRow(new String[]{NationwidePlayers.get(i).getName(), Integer.toString(Utility.NATIONWIDE_DIVISION), Double.toString(NationwidePlayers.get(i).getExpectedRank()),
					Double.toString(NationwidePlayers.get(i).getRating()), Double.toString(NationwidePlayers.get(i).getStdevRating()), 
					Integer.toString(NationwidePlayers.get(i).getAge()), Double.toString(NationwidePlayers.get(i).getCareerCurveVariableA()), 
					Double.toString(NationwidePlayers.get(i).getCareerCurveVariableB()), Double.toString(NationwidePlayers.get(i).getCareerCurveVariableC()), 
					Double.toString(NationwidePlayers.get(i).getPlayingProbability()), Boolean.toString(NationwidePlayers.get(i).getFullTime()), Boolean.toString(NationwidePlayers.get(i).getPlaceholder())});
		}
    	
    	teamInputTable.setModel(model);
    }
    
    public int _count = 1;
    public String result = "";

    private void simulateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulateButtonActionPerformed
    	if(NBA.equals(sportLeagueTypeComboBox.getModel().getSelectedItem()))
    		simulateNBA();
    	else if(PGA.equals(sportLeagueTypeComboBox.getModel().getSelectedItem()))
    		simulatePGA();
    }//GEN-LAST:event_simulateButtonActionPerformed

    private void simulateNBA(){
//    	for(int l = 1; l <= 120; l++){
    	DefaultTableModel model = (DefaultTableModel)(teamInputTable.getModel());
    	
    	// Create teams
    	Team[] teams = new Team[model.getRowCount()];
    	for(int i = 0; i < teams.length; i++){
    		teams[i] = new Team(model.getValueAt(i, 0).toString(), Integer.parseInt(model.getValueAt(i, 1).toString()), 
    				Integer.parseInt(model.getValueAt(i, 2).toString()), Double.parseDouble(model.getValueAt(i, 3).toString()), 
    				Double.parseDouble(model.getValueAt(i, 4).toString()), Double.parseDouble(model.getValueAt(i, 5).toString()));
    	}
    	
		// Create RPP rules
    	int numPromoteRelegate = Integer.parseInt(numTeamsRelegatePromoteTextField.getText());
//    	if(l <= 20){
//    		numPromoteRelegate = 0;
//    	}
//    	else if(21 <= l && l <= 40){
//    		numPromoteRelegate = 1;
//    	}
//    	else if(41 <= l && l <= 60){
//    		numPromoteRelegate = 2;
//    	}
//    	else if(61 <= l && l <= 80){
//    		numPromoteRelegate = 3;
//    	}
//    	else if(81 <= l && l <= 100){
//    		numPromoteRelegate = 4;
//    	}
//    	else if(101 <= l && l <= 120){
//    		numPromoteRelegate = 5;
//    	}
    	RPPRules myRPPRules = new RPPRules(numPromoteRelegate, numPromoteRelegate);
    	
    	// Create scheduling rules
    	int scheduleType = scheduleTypeComboBox.getSelectedIndex();
    	int numGamesAgainstDiv = Integer.parseInt(numGamesAgainstDivTextField.getText());
    	int numGamesAgainstOut = Integer.parseInt(numGamesAgainstOutTextField.getText());
    	SchedulingRules mySchedule = new SchedulingRules(scheduleType, numGamesAgainstDiv, numGamesAgainstOut);
    	
    	// Create league
    	League myLeague = new League(teams, mySchedule, myRPPRules);

    	int numYearsToRun = Integer.parseInt(numYearsToRunTextField.getText());
    	try{
    	myLeague.run(numYearsToRun);
    	}catch (Exception e){
    		e.printStackTrace();
    	}
    	String results = myLeague.getTextResults();

    	System.out.println("it works!!");
    	
    	int numDivisions = myLeague._divisions.length;
    	String[] resultColumns = new String[numDivisions * 3 + 1];
    	int count = 0;
    	resultColumns[count] = "Year";
    	count++;
    	for(int i = 0; i < numDivisions; i++){
    		resultColumns[count] = "Division " + i + " - Average Rating";
    		count++;
    		resultColumns[count] = "Division " + i + " - Average Standard Deviation of Rating";
    		count++;
    		resultColumns[count] = "Division " + i + " - Average Number of Fitting Teams";
    		count++;
    	}
    	DefaultTableModel resultsModel = new DefaultTableModel(resultColumns, 0);
    	DefaultTableModel resultsAverageModel = new DefaultTableModel(resultColumns, 0);
    	String[] resultInfo = myLeague.getResultsInfo().split("\n");
    	for(int i = 1; i < resultInfo.length; i++){
    		String[] resultLine = resultInfo[i].split(",");
    		resultsModel.addRow(resultLine);
    	}
    	leagueResultsTable.setModel(resultsModel);
    	
    	double totalRatingDiv1 = 0;
    	double totalRatingDiv2 = 0;
    	double totalRatingDiv3 = 0;
    	double totalStdDevRatingDiv1 = 0;
    	double totalStdDevRatingDiv2 = 0;
    	double totalStdDevRatingDiv3 = 0;
    	double totalFitDiv1 = 0;
    	double totalFitDiv2 = 0;
    	double totalFitDiv3 = 0;
    	
    	for(int i = 0; i < resultsModel.getRowCount(); i++){
    		totalRatingDiv1 += Double.parseDouble(resultsModel.getValueAt(i, 1).toString());
    		totalRatingDiv2 += Double.parseDouble(resultsModel.getValueAt(i, 4).toString());
    		totalRatingDiv3 += Double.parseDouble(resultsModel.getValueAt(i, 7).toString());
    		totalStdDevRatingDiv1 += Double.parseDouble(resultsModel.getValueAt(i, 2).toString());
    		totalStdDevRatingDiv2 += Double.parseDouble(resultsModel.getValueAt(i, 5).toString());
    		totalStdDevRatingDiv3 += Double.parseDouble(resultsModel.getValueAt(i, 8).toString());
    		totalFitDiv1 += Double.parseDouble(resultsModel.getValueAt(i, 3).toString());
    		totalFitDiv2 += Double.parseDouble(resultsModel.getValueAt(i, 6).toString());
    		totalFitDiv3 += Double.parseDouble(resultsModel.getValueAt(i, 9).toString());
    	}
    	double averageRatingDiv1 = totalRatingDiv1 / resultsModel.getRowCount();
    	double averageRatingDiv2 = totalRatingDiv2 / resultsModel.getRowCount();
    	double averageRatingDiv3 = totalRatingDiv3 / resultsModel.getRowCount();
    	double averageStdDevRatingDiv1 = totalStdDevRatingDiv1 / resultsModel.getRowCount();
    	double averageStdDevRatingDiv2 = totalStdDevRatingDiv2 / resultsModel.getRowCount();
    	double averageStdDevRatingDiv3 = totalStdDevRatingDiv3 / resultsModel.getRowCount();
    	double averageFitDiv1 = totalFitDiv1 / resultsModel.getRowCount();
    	double averageFitDiv2 = totalFitDiv2 / resultsModel.getRowCount();
    	double averageFitDiv3 = totalFitDiv3 / resultsModel.getRowCount();
    	
    	String[] processedResultsRow = new String[]{"Year", 
    			Double.toString(averageRatingDiv1), Double.toString(averageStdDevRatingDiv1), Double.toString(averageFitDiv1), 
    			Double.toString(averageRatingDiv2), Double.toString(averageStdDevRatingDiv2), Double.toString(averageFitDiv2), 
    			Double.toString(averageRatingDiv3), Double.toString(averageStdDevRatingDiv3), Double.toString(averageFitDiv3)};
    	    	
    	resultsAverageModel.addRow(processedResultsRow);
    	leagueResultsAverageTable.setModel(resultsAverageModel);
    	result += processedResultsRow[0] + "," + processedResultsRow[1] + "," + processedResultsRow[2] + ","
    	+ processedResultsRow[3] + "," + processedResultsRow[4] + "," + processedResultsRow[5] + ","
    	+ processedResultsRow[6] + "," + processedResultsRow[7] + "," + processedResultsRow[8] + "," + processedResultsRow[9] + "\n";
    	
    	int rowCount = resultsModel.getRowCount();
    	
    	String[] t = (Team.test.toString()).split("\n");
    	double tTotal = 0;
    	for(int i = 0; i < t.length; i++){
    		tTotal += Double.parseDouble(t[i]);
    	}
    	double tAverage = tTotal/t.length;
    	double sumOfVariances = 0;
    	for(int i = 0; i < t.length; i++){
    		sumOfVariances += Math.pow((Double.parseDouble(t[i]) - tAverage), 2.0);
    	}
    	
    	System.out.println(sumOfVariances/t.length - 1);
    	
    	Team.test = new StringBuffer();

    	try{
    		FileWriter outFile = new FileWriter("Output/testFile" + _count + ".txt");
    		PrintWriter out = new PrintWriter(outFile);
    		out.print(results);
    		out.close();

    		FileWriter outFile2 = new FileWriter("Output/teamInfo" + _count + ".csv");
    		PrintWriter out2 = new PrintWriter(outFile2);
    		StringBuffer[] teamInfo = myLeague.getTeamInfo();
    		for(int i = 0; i < teamInfo.length; i++){
    			out2.print(teamInfo[i].toString());
    		}
    		out2.close();

    		FileWriter outFileResultsInfo = new FileWriter("Output/resultsInfo" + _count + ".csv");
    		PrintWriter outResultsInfo = new PrintWriter(outFileResultsInfo);
    		outResultsInfo.print(myLeague.getResultsInfo());
    		outResultsInfo.close();
    		
//    		FileWriter test = new FileWriter("BLAHBLAH.csv");
//    		PrintWriter testW = new PrintWriter(test);
//    		testW.print(Team.test.toString());
//    		testW.close();
    		_count++;
    	}catch(Exception e){
    		e.printStackTrace();
    	}
//        }
    	try{
    		FileWriter outFile999 = new FileWriter("9999Result.csv");
    		PrintWriter out999 = new PrintWriter(outFile999);
    		out999.print(result);
    		out999.close();
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    }
    
    private void simulatePGA(){
    	int numPGARemain = 0;
    	int numPGAFromTournament = 0;
    	int numPGAFromNationwideAuto = 0;
    	int numNationwideNew = 0;

    	for(int k = 49; k < 51; k++){

    		if(k == 0){
    			numPGARemain = 125;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 55;
    			numNationwideNew = 0;
    		}
    		else if(k == 1){
    			numPGARemain = 125;
    			numPGAFromTournament = 5;
    			numPGAFromNationwideAuto = 50;
    			numNationwideNew = 0;
    		}
    		else if(k == 2){
    			numPGARemain = 125;
    			numPGAFromTournament = 10;
    			numPGAFromNationwideAuto = 45;
    			numNationwideNew = 0;
    		}
    		else if(k == 3){
    			numPGARemain = 125;
    			numPGAFromTournament = 15;
    			numPGAFromNationwideAuto = 40;
    			numNationwideNew = 0;
    		}
    		else if(k == 4){
    			numPGARemain = 125;
    			numPGAFromTournament = 20;
    			numPGAFromNationwideAuto = 35;
    			numNationwideNew = 0;
    		}
    		else if(k == 5){
    			numPGARemain = 125;
    			numPGAFromTournament = 25;
    			numPGAFromNationwideAuto = 30;
    			numNationwideNew = 0;
    		}
    		else if(k == 6){
    			numPGARemain = 125;
    			numPGAFromTournament = 30;
    			numPGAFromNationwideAuto = 25;
    			numNationwideNew = 0;
    		}
    		else if(k == 7){
    			numPGARemain = 125;
    			numPGAFromTournament = 35;
    			numPGAFromNationwideAuto = 20;
    			numNationwideNew = 0;
    		}
    		else if(k == 8){
    			numPGARemain = 125;
    			numPGAFromTournament = 40;
    			numPGAFromNationwideAuto = 15;
    			numNationwideNew = 0;
    		}
    		else if(k == 9){
    			numPGARemain = 125;
    			numPGAFromTournament = 45;
    			numPGAFromNationwideAuto = 10;
    			numNationwideNew = 0;
    		}
    		else if(k == 10){
    			numPGARemain = 125;
    			numPGAFromTournament = 50;
    			numPGAFromNationwideAuto = 5;
    			numNationwideNew = 0;
    		}
    		else if(k == 11){
    			numPGARemain = 125;
    			numPGAFromTournament = 55;
    			numPGAFromNationwideAuto = 0;
    			numNationwideNew = 0;
    		}
    		else if(k == 12){
    			numPGARemain = 170;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 10;
    			numNationwideNew = 0;
    		}
    		else if(k == 13){
    			numPGARemain = 165;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 15;
    			numNationwideNew = 0;
    		}
    		else if(k == 14){
    			numPGARemain = 160;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 20;
    			numNationwideNew = 0;
    		}
    		else if(k == 15){
    			numPGARemain = 155;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 25;
    			numNationwideNew = 0;
    		}
    		else if(k == 16){
    			numPGARemain = 150;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 30;
    			numNationwideNew = 0;
    		}
    		else if(k == 17){
    			numPGARemain = 145;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 35;
    			numNationwideNew = 0;
    		}
    		else if(k == 18){
    			numPGARemain = 140;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 40;
    			numNationwideNew = 0;
    		}
    		else if(k == 19){
    			numPGARemain = 135;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 45;
    			numNationwideNew = 0;
    		}
    		else if(k == 20){
    			numPGARemain = 130;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 50;
    			numNationwideNew = 0;
    		}
    		else if(k == 21){
    			numPGARemain = 125;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 55;
    			numNationwideNew = 0;
    		}
    		else if(k == 22){
    			numPGARemain = 120;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 60;
    			numNationwideNew = 0;
    		}
    		else if(k == 23){
    			numPGARemain = 155;
    			numPGAFromTournament = 5;
    			numPGAFromNationwideAuto = 20;
    			numNationwideNew = 0;
    		}
    		else if(k == 24){
    			numPGARemain = 155;
    			numPGAFromTournament = 10;
    			numPGAFromNationwideAuto = 15;
    			numNationwideNew = 0;
    		}
    		else if(k == 25){
    			numPGARemain = 155;
    			numPGAFromTournament = 15;
    			numPGAFromNationwideAuto = 10;
    			numNationwideNew = 0;
    		}
    		else if(k == 26){
    			numPGARemain = 150;
    			numPGAFromTournament = 5;
    			numPGAFromNationwideAuto = 25;
    			numNationwideNew = 0;
    		}
    		else if(k == 27){
    			numPGARemain = 150;
    			numPGAFromTournament = 10;
    			numPGAFromNationwideAuto = 20;
    			numNationwideNew = 0;
    		}
    		else if(k == 28){
    			numPGARemain = 150;
    			numPGAFromTournament = 15;
    			numPGAFromNationwideAuto = 15;
    			numNationwideNew = 0;
    		}
    		else if(k == 29){
    			numPGARemain = 145;
    			numPGAFromTournament = 5;
    			numPGAFromNationwideAuto = 30;
    			numNationwideNew = 0;
    		}
    		else if(k == 30){
    			numPGARemain = 145;
    			numPGAFromTournament = 10;
    			numPGAFromNationwideAuto = 25;
    			numNationwideNew = 0;
    		}
    		else if(k == 31){
    			numPGARemain = 145;
    			numPGAFromTournament = 15;
    			numPGAFromNationwideAuto = 20;
    			numNationwideNew = 0;
    		}
    		else if(k == 32){
    			numPGARemain = 140;
    			numPGAFromTournament = 5;
    			numPGAFromNationwideAuto = 35;
    			numNationwideNew = 0;
    		}
    		else if(k == 33){
    			numPGARemain = 140;
    			numPGAFromTournament = 10;
    			numPGAFromNationwideAuto = 30;
    			numNationwideNew = 0;
    		}
    		else if(k == 34){
    			numPGARemain = 140;
    			numPGAFromTournament = 15;
    			numPGAFromNationwideAuto = 25;
    			numNationwideNew = 0;
    		}
    		else if(k == 35){
    			numPGARemain = 159;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 21;
    			numNationwideNew = 0;
    		}
    		else if(k == 36){
    			numPGARemain = 158;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 22;
    			numNationwideNew = 0;
    		}
    		else if(k == 37){
    			numPGARemain = 157;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 23;
    			numNationwideNew = 0;
    		}
    		else if(k == 38){
    			numPGARemain = 156;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 24;
    			numNationwideNew = 0;
    		}
    		else if(k == 39){
    			numPGARemain = 154;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 26;
    			numNationwideNew = 0;
    		}
    		else if(k == 40){
    			numPGARemain = 153;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 27;
    			numNationwideNew = 0;
    		}
    		else if(k == 41){
    			numPGARemain = 152;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 28;
    			numNationwideNew = 0;
    		}
    		else if(k == 42){
    			numPGARemain = 151;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 29;
    			numNationwideNew = 0;
    		}
    		else if(k == 43){
    			numPGARemain = 149;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 31;
    			numNationwideNew = 0;
    		}
    		else if(k == 44){
    			numPGARemain = 148;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 32;
    			numNationwideNew = 0;
    		}
    		else if(k == 45){
    			numPGARemain = 147;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 33;
    			numNationwideNew = 0;
    		}
    		else if(k == 46){
    			numPGARemain = 146;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 34;
    			numNationwideNew = 0;
    		}
    		else if(k == 47){
    			numPGARemain = 144;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 36;
    			numNationwideNew = 0;
    		}
    		else if(k == 48){
    			numPGARemain = 143;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 37;
    			numNationwideNew = 0;
    		}
    		else if(k == 49){
    			numPGARemain = 142;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 38;
    			numNationwideNew = 0;
    		}
    		else if(k == 50){
    			numPGARemain = 141;
    			numPGAFromTournament = 0;
    			numPGAFromNationwideAuto = 39;
    			numNationwideNew = 0;
    		}

    		for(int p = 0; p < 20; p++){

    			samplePGAPlayers();

    			DefaultTableModel model = (DefaultTableModel)(teamInputTable.getModel());

    			// Create players
    			ArrayList<Golf.Player> players = new ArrayList<Golf.Player>();
    			for(int i = 0; i < model.getRowCount(); i++){
    				players.add(new Golf.Player(model.getValueAt(i, 0).toString(), Integer.parseInt(model.getValueAt(i, 1).toString()), Double.parseDouble(model.getValueAt(i, 2).toString()),
    						Double.parseDouble(model.getValueAt(i, 3).toString()), Double.parseDouble(model.getValueAt(i, 4).toString()),
    						Integer.parseInt(model.getValueAt(i, 5).toString()), Double.parseDouble(model.getValueAt(i, 6).toString()),
    						Double.parseDouble(model.getValueAt(i, 7).toString()), Double.parseDouble(model.getValueAt(i, 8).toString()),
    						Double.parseDouble(model.getValueAt(i, 9).toString()), Boolean.parseBoolean(model.getValueAt(i, 10).toString()), Boolean.parseBoolean(model.getValueAt(i, 11).toString())));
    			}

    			// Create RPP rules
    			//    	int numPGARemain = Integer.parseInt(numPGARemainTextField.getText());
    			//    	int numPGAFromNationwideAuto = Integer.parseInt(numPGAFromNationwideTextField.getText());
    			//    	int numPGAFromTournament = Integer.parseInt(numPGAFromTournamentTextField.getText());
    			//    	int numNationwideNew = Integer.parseInt(numNationwideNewTextField.getText());

    			Golf.RPPRules myRPPRules = new Golf.RPPRules(numPGARemain, numPGAFromNationwideAuto, numPGAFromTournament, numNationwideNew);

    			// Create league
    			Golf.League myLeague = new Golf.League(players, myRPPRules);

    			int numYearsToRun = Integer.parseInt(numYearsToRunTextField.getText());
    			try{
    				myLeague.run(numYearsToRun);
    			}catch (Exception e){
    				e.printStackTrace();
    			}

    			System.out.println("it works!!");

    			int numDivisions = myLeague._divisions.size();
    			String[] resultColumns = new String[numDivisions * 3 + 1];
    			int count = 0;
    			resultColumns[count] = "Year";
    			count++;
    			for(int i = 0; i < numDivisions; i++){
    				resultColumns[count] = "Division " + i + " - Average Rating";
    				count++;
    				resultColumns[count] = "Division " + i + " - Average Standard Deviation of Rating";
    				count++;
    				resultColumns[count] = "Division " + i + " - Average Number of Fitting Players";
    				count++;
    			}
    			DefaultTableModel resultsModel = new DefaultTableModel(resultColumns, 0);
    			DefaultTableModel resultsAverageModel = new DefaultTableModel(resultColumns, 0);
    			String[] resultInfo = myLeague.getResultsInfo().split("\n");
    			for(int i = 1; i < resultInfo.length; i++){
    				String[] resultLine = resultInfo[i].split(",");
    				resultsModel.addRow(resultLine);
    			}
    			leagueResultsTable.setModel(resultsModel);

    			double totalRatingDiv1 = 0;
    			double totalRatingDiv2 = 0;
    			double totalStdDevRatingDiv1 = 0;
    			double totalStdDevRatingDiv2 = 0;
    			double totalFitDiv1 = 0;
    			double totalFitDiv2 = 0;

    			for(int i = 0; i < resultsModel.getRowCount(); i++){
    				totalRatingDiv1 += Double.parseDouble(resultsModel.getValueAt(i, 1).toString());
    				totalRatingDiv2 += Double.parseDouble(resultsModel.getValueAt(i, 4).toString());
    				totalStdDevRatingDiv1 += Double.parseDouble(resultsModel.getValueAt(i, 2).toString());
    				totalStdDevRatingDiv2 += Double.parseDouble(resultsModel.getValueAt(i, 5).toString());
    				totalFitDiv1 += Double.parseDouble(resultsModel.getValueAt(i, 3).toString());
    				totalFitDiv2 += Double.parseDouble(resultsModel.getValueAt(i, 6).toString());
    			}
    			double averageRatingDiv1 = totalRatingDiv1 / resultsModel.getRowCount();
    			double averageRatingDiv2 = totalRatingDiv2 / resultsModel.getRowCount();
    			double averageStdDevRatingDiv1 = totalStdDevRatingDiv1 / resultsModel.getRowCount();
    			double averageStdDevRatingDiv2 = totalStdDevRatingDiv2 / resultsModel.getRowCount();
    			double averageFitDiv1 = totalFitDiv1 / resultsModel.getRowCount();
    			double averageFitDiv2 = totalFitDiv2 / resultsModel.getRowCount();

    			String[] processedResultsRow = new String[]{"Year", 
    					Double.toString(averageRatingDiv1), Double.toString(averageStdDevRatingDiv1), Double.toString(averageFitDiv1), 
    					Double.toString(averageRatingDiv2), Double.toString(averageStdDevRatingDiv2), Double.toString(averageFitDiv2)};

    			resultsAverageModel.addRow(processedResultsRow);
    			leagueResultsAverageTable.setModel(resultsAverageModel);
    			result += processedResultsRow[0] + "," + processedResultsRow[1] + "," + processedResultsRow[2] + ","
    			+ processedResultsRow[3] + "," + processedResultsRow[4] + "," + processedResultsRow[5] + "," + processedResultsRow[6] + "\n";

    			try{
    				FileWriter outFileResultsInfo = new FileWriter("Golf/Output/resultsInfo" + _count + ".csv");
    				PrintWriter outResultsInfo = new PrintWriter(outFileResultsInfo);
    				outResultsInfo.print(myLeague.getResultsInfo());
    				outResultsInfo.close();

//    				FileWriter outFileSeasonalResults = new FileWriter("Golf/Output/seasonalResults" + _count + ".csv");
//    				PrintWriter outSeasonalResults = new PrintWriter(outFileSeasonalResults);
//    				outSeasonalResults.print(myLeague.getSeasonalResults());
//    				outSeasonalResults.close();

    				FileWriter outFileTournamentResults1 = new FileWriter("Golf/Output/PGA Tournament Results" + _count + ".csv");
    				PrintWriter outTournamentResults1 = new PrintWriter(outFileTournamentResults1);
    				outTournamentResults1.print(myLeague.getPGATournamentResults());
    				outTournamentResults1.close();

    				FileWriter outFileTournamentResults2 = new FileWriter("Golf/Output/Nationwide Tournament Results" + _count + ".csv");
    				PrintWriter outTournamentResults2 = new PrintWriter(outFileTournamentResults2);
    				outTournamentResults2.print(myLeague.getNationwideTournamentResults());
    				outTournamentResults2.close();

    				FileWriter outFileCareersInfo = new FileWriter("Golf/Output/careersInfo" + _count + ".csv");
    				PrintWriter outCareersInfo = new PrintWriter(outFileCareersInfo);
    				ArrayList<StringBuffer> careersInfoBufferList = myLeague.getCareersInfo();
    				for(int i = 0; i < careersInfoBufferList.size(); i++){
    					outCareersInfo.println(careersInfoBufferList.get(i));
    				}
    				outCareersInfo.close();
    				_count++;
    			}catch(Exception e){
    				e.printStackTrace();
    			}
    		}
    		try{
    			FileWriter outFile999 = new FileWriter("Golf/Output/Long Sim Result" + k + ".csv");
    			PrintWriter out999 = new PrintWriter(outFile999);
    			out999.print(result);
    			out999.close();
    		}catch(Exception e){
    			e.printStackTrace();
    		}
    	}
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMoreTeamsButton;
    private javax.swing.JButton importPlayerDataButton;
    private javax.swing.JButton importTeamDataButton;
    private javax.swing.JLabel initialTeamDataLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable leagueResultsAverageTable;
    private javax.swing.JTable leagueResultsTable;
    private javax.swing.JLabel numGamesAgainstDivLabel;
    private javax.swing.JTextField numGamesAgainstDivTextField;
    private javax.swing.JLabel numGamesAgainstOutLabel;
    private javax.swing.JTextField numGamesAgainstOutTextField;
    private javax.swing.JLabel numNationwideNewLabel;
    private javax.swing.JTextField numNationwideNewTextField;
    private javax.swing.JLabel numPGAFromNationwideLabel;
    private javax.swing.JTextField numPGAFromNationwideTextField;
    private javax.swing.JLabel numPGAFromTournamentLabel;
    private javax.swing.JTextField numPGAFromTournamentTextField;
    private javax.swing.JLabel numPGARemainLabel;
    private javax.swing.JTextField numPGARemainTextField;
    private javax.swing.JLabel numRelegatePromoteLabel;
    private javax.swing.JTextField numTeamsRelegatePromoteTextField;
    private javax.swing.JLabel numYearsToRunLabel;
    private javax.swing.JTextField numYearsToRunTextField;
    private javax.swing.JButton samplePlayerDataButton;
    private javax.swing.JComboBox scheduleTypeComboBox;
    private javax.swing.JLabel scheduleTypeLabel;
    private javax.swing.JButton simulateButton;
    private javax.swing.JLabel simulationResultsAverageLabel;
    private javax.swing.JLabel simulationResultsLabel;
    private javax.swing.JComboBox sportLeagueTypeComboBox;
    private javax.swing.JLabel sportLeagueTypeLabel;
    private javax.swing.JTable teamInputTable;
    // End of variables declaration//GEN-END:variables

}
